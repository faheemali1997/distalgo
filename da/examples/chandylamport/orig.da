import sys
from random import randint
import random

########################################################################
## Chandy Lamport Algorithm for Determining States of Gloabal System ###
########################################################################

class Nodes(process):
    def setup(nodes:set, initial_state:list, leader:bool):
        self.is_leader = leader
        self.state = initial_state
        self.has_recorded_state = False
        self.channel_state = []
        ## A dictionary to store the state of the channels
        self.channels = dict.fromkeys(nodes,True)


    ## Transfering a random value to some random node.
    def transfer():
        value = randint(1,100)
        nnode = random.choice(tuple(nodes))
        send(('transfer',value), to={nnode})
        output('Transfer '+ str(value) + ' to '+ str(nnode))
    
    ## Node recieves a value and processes it
    def receive(msg=('transfer',value), from_=node):
        ## If the node has recorded it's own local state but if channel is still under observation.
        if(self.has_recorded_state and channels.get(node)):
            output('Add ' + str(value) + ' to channel State')
            ## Records the value to the channel state since it was in transition.
            self.channel_state.append(value)
        else: 
            output('Add ' + str(value) + ' to local State')
            ## Records the value to its local state.
            self.state.append(value)

    ## Function to initiate the snapshot.
    def sendMarker():
        output('Initiating Snapshot')
        ## Before initiating the node records its own state.
        output("Recording state for node: " + str(self))
        ## Node send a marker message to every other node in the system.
        send(('marker','marker_message'), to=nodes)
    
    ## Function upon receiving the marker message by a node.
    def receive(msg=('marker', 'marker_message'), from_=node):
        ## If the node has not recorded its own state then it records it and then sends a marker to every other node.
        if(not self.has_recorded_state):
            self.has_recorded_state = True
            output("Recording state for node: " + str(self))   
            send(('marker','marker_message'), to=nodes)
            self.channels[node] = False
        else:
            ## Else the node stops recording on that particular channel since it has already seen the marker.
            self.channels[node] = False

    def run():
        transfer()
        
        if(is_leader):
            sendMarker()
        
        ## We end the snapshot when every node has recieved a marker message on each of its channels.
        await(each(node in nodes, has= some(received(('marker', _), from_= _node))))

        output(self.state + self.channel_state)
        
def main():
    output("Starting Chandy Lamport Global Snapshot Algorithm")

    nnodes = int(sys.argv[1]) if len(sys.argv) > 1 else 4

    ## Creating new nodes
    nodes = new(Nodes, num= nnodes)

    list_nodes = list(nodes)

    initial_state = []

    ## Setup for snapshot initiator node
    setup(list_nodes[0],(nodes-{list_nodes[0]},initial_state,True)) 
    
    for node in list_nodes[1:]: 
        setup(node,(nodes-{node},initial_state,False)) ##calling setup of node with node set and initial state
    
    ## Starting nodes
    start(nodes)
